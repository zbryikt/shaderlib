// Generated by LiveScript 1.3.1
var glslify;
glslify = require('glslify');
window.addEventListener('load', function(){
  var shader3, shader2, shader1, shaders, renderer, renderer2;
  shader3 = {
    uniforms: {},
    vertexShader: "precision highp float;\nattribute vec3 position;\nvoid main() {\n  gl_Position = vec4(position, 1.);\n}",
    fragmentShader: glslify('precision highp float;\n#pragma glslify: high_pass = require(\'../../src/high_pass.shader\')\n#pragma glslify: fxaa = require(\'../../src/fxaa.shader\')\n#pragma glslify: grayscale = require(\'../../src/grayscale.shader\')\n#pragma glslify: blur = require(\'../../src/blur/13.shader\')\n#pragma glslify: sobel = require(\'../../src/sobel.shader\')\n#pragma glslify: halftone = require(\'glsl-halftone\')\n#pragma glslify: edge = require(\'glsl-edge-detection\')\nuniform sampler2D uIn1;\nuniform vec2 uResolution;\nvoid main() {\n  vec2 uv = vec2(gl_FragCoord.x / uResolution.x, 1. - gl_FragCoord.y / uResolution.y);\n  float e = edge(uIn1, uv, uResolution);\n  gl_FragColor = vec4(vec3(e),1.);\n}')
  };
  shader2 = {
    uniforms: {},
    vertexShader: "precision highp float;\nattribute vec3 position;\nvoid main() {\n  gl_Position = vec4(position, 1.);\n}",
    fragmentShader: glslify('precision highp float;\n#pragma glslify: fbm = require(\'../../src/fbm.shader\')\nuniform sampler2D uIn1;\nuniform vec2 uResolution;\nvoid main() {\n  vec2 uv = vec2(gl_FragCoord.x / uResolution.x, gl_FragCoord.y / uResolution.y);\n  vec4 c;\n  gl_FragColor = vec4(1., 0., 0., 1.);\n  c = vec4(texture2D(uIn1, uv));\n  gl_FragColor = vec4(vec3(c) * fbm(uv * 10.), 1.);\n}')
  };
  shader1 = {
    uniforms: {
      color: {
        type: '3fv',
        value: [0, 0, 0]
      }
    },
    vertexShader: "precision highp float;\nuniform float uTime;\nattribute vec3 position;\nvoid main() {\n  gl_Position = vec4(position, 1.);\n}",
    fragmentShader: glslify('precision highp float;\n#pragma glslify: gradient = require(\'../../src/raster/gradient/3d1.shader\')\n#pragma glslify: cloud = require(\'../../src/raster/cloud.shader\')\n#pragma glslify: vignette = require(\'../../src/vignette.shader\')\n//#pragma glslify: color_shift = require(\'../../src/color_shift.shader\')\nuniform float uTime;\nuniform vec3 color;\nuniform vec2 uResolution;\nuniform sampler2D uImage;\nvec3 cc(vec2 uv, float t) {\n  vec3 c = gradient(uv, vec3(1.,0.,0.), vec3(0.,1.,0.), vec3(0.,0.,1.), 3.);\n  float d = cloud(uv, t, vec2(1., 0.), 3.);\n  float e = vignette(1., 0.5, uv);\n  return c * d * e;\n}\n#define color_shift(a,b,c,d,e,f) (a(b, d) + a(vec2(b.x - c, b.y), d) * e * 0.5 + a(vec2(b.x + c, b.y), d) * f * 0.5)\nvoid main() {\n  float t = uTime * 10.;\n  vec2 uv = vec2(gl_FragCoord.x / uResolution.x, gl_FragCoord.y / uResolution.y);\n  vec3 o = color_shift(cc, uv, 0.1, t, vec3(1., 0., 0.), vec3(0., 0., 1.));\n  gl_FragColor = vec4(o, 1.);\n  //gl_FragColor = vec4(texture2D(uImage, uv));\n}')
  };
  shaders = [shader1];
  renderer = new ShaderRenderer(shaders, {
    root: '#root .box:nth-child(1)'
  });
  renderer.animate();
  renderer2 = new ShaderRenderer(shader3, {
    root: '#root .box:nth-child(2)'
  });
  renderer2.input(renderer);
  return renderer2.animate();
});