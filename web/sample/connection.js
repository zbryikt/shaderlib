// Generated by LiveScript 1.3.1
var glslify, cloud;
glslify = require('glslify');
cloud = require("./sample/cloud");
window.addEventListener('load', function(){
  var shader, renderer;
  shader = {
    fragmentShader: glslify('precision highp float;\n#pragma glslify: aspect_ratio = require("../../src/aspect_ratio.shader")\n#pragma glslify: noise = require("../../src/noise.shader")\n#pragma glslify: cloud = require("../../src/raster/cloud.shader")\n#pragma glslify: vignette = require("../../src/vignette.shader")\n\nuniform float uTime;\nuniform vec2 uResolution;\n\nfloat distance_to_line(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 n = b - a;\n  return length(pa - clamp(dot(pa, n) / dot(n, n), 0., 1.) * n);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  float d = distance_to_line(p, a, b);\n  return clamp(smoothstep(0.02, 0.0, d), 0.0, 0.9);\n}\n\nvec2 getpt(vec2 id, float t) {\n  vec2 pt = vec2(noise(id.x + noise(id.y) * 625.788) * t, noise(id.y + noise(id.x) * 9527.145) * t);\n  pt = vec2(cos(pt.x), sin(pt.y)) * 0.4;\n  return pt;\n}\nvoid main() {\n  float t = uTime * 2., f, d;\n  float size = 20.;\n  vec3 uv3 = aspect_ratio(uResolution, 0);\n  vec2 uv = fract(vec2(uv3) * size) - 0.5;\n  vec2 id = floor(vec2(uv3) * size);\n  vec2 pt1, pt2, pt3;\n  vec2 p[9];\n  for(float i=-1.;i<=1.;i+=1.) {\n    for(float j=-1.;j<=1.;j+=1.) {\n      p[int(i * 3. + j + 4.)] = getpt(id + vec2(i, j), t) + vec2(i, j);\n    }\n  }\n  d = length(uv - p[4]);\n  f = smoothstep(0.09, 0.03, d);\n  for(float i=0.;i<9.;i++) {\n    f += line(uv, p[4], p[int(i)]) * smoothstep(0.7, 0.2, 0.4 * length(p[int(i)] - p[4]));\n  }\n  f += line(uv, p[1], p[3]) * smoothstep(0.6, 0.2, 0.4 * length(p[3] - p[1]));\n  f += line(uv, p[1], p[5]) * smoothstep(0.6, 0.2, 0.4 * length(p[5] - p[1]));\n  f += line(uv, p[7], p[3]) * smoothstep(0.6, 0.2, 0.4 * length(p[3] - p[7]));\n  f += line(uv, p[7], p[5]) * smoothstep(0.6, 0.2, 0.4 * length(p[5] - p[7]));\n  f = clamp(f, 0., 1.);\n  vec3 fg = vec3(1., 1., 1.);\n  //vec3 bg = vec3(.6, 0., .4);\n  vec3 bg = vec3(.0, 0., .0);\n  float c = cloud(vec2(uv3), t * 100., vec2(1., 0.), 0.1) * 0.9;\n  gl_FragColor = vec4(mix(bg, fg, f) + c * vec3(1., 1., 1.), 1.);\n}')
  };
  renderer = new ShaderRenderer([shader], {
    root: '#root'
  });
  return renderer.animate();
});