// Generated by LiveScript 1.3.1
var shaderlib, sampleObj;
shaderlib = {};
shaderlib.module = {
  hash: {},
  get: function(name){
    return {
      code: this.hash[name]
    };
  },
  register: function(name, code){
    var k, v, results$ = [];
    if (typeof name === 'object') {
      for (k in name) {
        v = name[k];
        results$.push(this.hash[k] = v);
      }
      return results$;
    } else {
      return this.hash[name] = code;
    }
  }
};
shaderlib.link = function(shader){
  var ref$, u, varying, vs, fs, use, typemap, i$, len$, item, ret, ulist, v, k, name, type;
  ref$ = ['uniforms', 'varying', 'vertexShader', 'fragmentShader', 'use'].map(function(it){
    return shader[it];
  }), u = ref$[0], varying = ref$[1], vs = ref$[2], fs = ref$[3], use = ref$[4];
  typemap = function(type){
    var ret;
    ret = {
      t: "Sampler2D",
      f: "float"
    }[type];
    return !ret ? type : ret;
  };
  for (i$ = 0, len$ = (ref$ = use || []).length; i$ < len$; ++i$) {
    item = ref$[i$];
    ret = this.module.get(item.name);
    vs = ret.code + '\n' + vs;
    fs = ret.code + '\n' + fs;
  }
  ulist = [];
  for (i$ = 0, len$ = (ref$ = varying || []).length; i$ < len$; ++i$) {
    v = ref$[i$];
    vs = ("varying " + typemap(v.type) + " " + v.name + ";\n") + vs;
    fs = ("varying " + typemap(v.type) + " " + v.name + ";\n") + fs;
  }
  for (k in ref$ = u || {}) {
    v = ref$[k];
    name = k;
    type = {
      t: "Sampler2D",
      f: "float"
    }[v.type];
    if (!type && v.value) {
      if (v.value.isVector2) {
        type = 'vec2';
      } else if (v.value.isVector3) {
        type = 'vec3';
      } else if (v.value.isVector4) {
        type = 'vec4';
      }
    }
    if (!type) {
      continue;
    }
    ulist.push("uniform " + type + " " + name);
  }
  ulist = ulist.join('\n') + '\n';
  vs = ulist + vs;
  fs = ulist + fs;
  delete shader.use;
  delete shader.varying;
  if (u) {
    shader.uniforms = u;
  }
  if (vs) {
    shader.vertexShader = vs;
  }
  if (fs) {
    shader.fragmentShader = fs;
  }
  return shader;
};
sampleObj = {
  uniforms: {},
  vertexShader: {},
  fragmentShader: {},
  use: [
    {
      name: 'blend@x.y.z'
    }, {
      name: 'sobel'
    }
  ]
};