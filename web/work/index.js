// Generated by LiveScript 1.3.1
var init, ref$, camera, scene, renderer, w, h, animate, plane, mat, mesh, light;
init = function(w, h){
  var camera, scene, renderer, animate;
  w == null && (w = window.innerWidth);
  h == null && (h = window.innerHeight);
  camera = new THREE.PerspectiveCamera(45, w / h, 1, 10000);
  scene = new THREE.Scene();
  renderer = new THREE.WebGLRenderer({
    antialias: true
  });
  renderer.setSize(w, h);
  document.body.appendChild(renderer.domElement);
  animate = function(renderFunc){
    var _animate;
    _animate = function(value){
      requestAnimationFrame(_animate);
      return renderFunc(value);
    };
    return _animate();
  };
  return {
    camera: camera,
    scene: scene,
    renderer: renderer,
    w: w,
    h: h,
    animate: animate
  };
};
ref$ = init(), camera = ref$.camera, scene = ref$.scene, renderer = ref$.renderer, w = ref$.w, h = ref$.h, animate = ref$.animate;
camera.position.set(0, 0, 2);
camera.lookAt(0, 0, 0);
plane = new THREE.PlaneGeometry(1, 1, 32, 32);
mat = new THREE.ShaderMaterial(shaderlib.link({
  use: [
    {
      name: "src/noise"
    }, {
      name: "src/fbm"
    }
  ],
  varying: [{
    type: 'vec2',
    name: 'vUv'
  }],
  vertexShader: "void main() {\n  vUv = vec2(fbm(uv), fbm(uv));\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.);\n}",
  fragmentShader: "void main() {\n  gl_FragColor = vec4(vUv.x, vUv.y, 0., 1.);\n}"
}));
mesh = new THREE.Mesh(plane, mat);
scene.add(mesh);
light = new THREE.AmbientLight(0xffffff);
scene.add(light);
renderer.render(scene, camera);