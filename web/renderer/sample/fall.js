// Generated by LiveScript 1.3.1
var glslify, cloud;
glslify = require('glslify');
cloud = require("./sample/cloud");
window.addEventListener('load', function(){
  var shader, renderer;
  shader = {
    fragmentShader: glslify('precision highp float;\n#pragma glslify: aspect_ratio = require("../../src/aspect_ratio.shader")\n#pragma glslify: quantize = require("../../src/quantize.shader")\n#pragma glslify: fbm = require("../../src/fbm.shader")\n#pragma glslify: noise = require("glsl-noise/simplex/2d")\n\n// Processing specific input\nuniform float uTime;\nuniform vec2 uResolution;\n\nvoid main() {\n  vec3 uv = aspect_ratio(uResolution, 1);\n  uv.y = 1. - uv.y;\n  float t = uTime * .2;\n  float m = 0., c=0.;\n  for(float i=0.;i<5.;i+=2.) {\n\n    float size = 3. + i;\n    vec2 id = floor(uv.xy * size);\n    vec2 ft = fract(uv.xy * size);\n    m = smoothstep(.6, .4, ft.y * 0.6 + fbm((uv.x + i * 18. + t) * 27.1234) * 0.8 - 0.4);\n    m = mod(100. - t  + ft.y * 0.6 + fbm(uv.x * 52.7134) * 0.4 - 0.2, .3);\n    if(m > 0.5) m = 0.;\n    if(m < 0.0) m = 0.;\n    m = m * 2.;\n    float f = fbm(uv.xy * 28981.515 + t);\n    float g = fbm((uv.x + i * 32.) * 9890.181572 + t);\n    if(g < .5) m = m * g;\n    if(f < 0.6) m = m * f;\n    c += m;\n  }\n  c = c * pow((1. -  uv.y), 2.);\n  vec3 color = vec3(1., 1., 1.) * c;\n  vec3 bk = mix(vec3(1., 1., 1.), vec3(1., .7, .2),  pow(length(uv.xy - vec2(.5, -.2)), 3.));\n  gl_FragColor = vec4(color + bk, 1.);\n}')
  };
  renderer = new ShaderRenderer([shader], {
    root: '#root'
  });
  renderer.init();
  return renderer.animate();
});