// Generated by LiveScript 1.3.1
var glslify, cloud;
glslify = require('glslify');
cloud = require("./sample/cloud");
window.addEventListener('load', function(){
  var shader, renderer;
  shader = {
    fragmentShader: glslify('precision highp float;\n#pragma glslify: aspect_ratio = require("../../src/aspect_ratio.shader")\n#pragma glslify: noise = require("../../src/noise.shader")\n#define PI2 6.2831852\n\nuniform float uTime;\nuniform vec2 uResolution;\nvoid main() {\n  float f = 0., v, d, t = uTime * 0.25;\n  vec3 uv = aspect_ratio(uResolution, 1);\n  vec3 c1 = vec3(1., 1., .2);\n  vec3 c2 = vec3(1., .5, .3);\n  vec3 c3 = vec3(.8, .1, .8);\n  vec3 bk = vec3(.35, 0., .2);\n  float c[3];\n\n  for(float i=1.;i<8.;i++) {\n    v = sin((uv.x + i * 0.3 + t * i * 0.1) * PI2 * (0.87 - i * 0.05)) * (sin(t + i) * 0.05 + i * 0.01) + 0.4;\n    if(uv.y > v) {\n      c[int(mod(i,3.))] += smoothstep(0.1, 0.0, uv.y - v) * 0.2;\n    } else {\n      c[int(mod(i,3.))] += smoothstep(0.001, 0.0, v - uv.y) * 0.2;\n    }\n  }\n  gl_FragColor = vec4(\n    c1 * c[0] +\n    c2 * c[1] +\n    c3 * c[2] + clamp((1. - (c[0] + c[1] + c[2])) * 1., 0., 1.) * bk,\n    1.\n  );\n}')
  };
  renderer = new ShaderRenderer([shader], {
    root: '#root'
  });
  return renderer.animate();
});