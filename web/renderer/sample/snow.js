// Generated by LiveScript 1.3.1
var glslify, cloud;
glslify = require('glslify');
cloud = require("./sample/cloud");
window.addEventListener('load', function(){
  var shader, renderer;
  shader = {
    fragmentShader: glslify('precision highp float;\n#pragma glslify: aspect_ratio = require("../../src/aspect_ratio.shader")\n#pragma glslify: noise = require("../../src/noise.shader")\n#pragma glslify: cloud = require("../../src/raster/cloud.shader")\n#pragma glslify: vignette = require("../../src/vignette.shader")\n\nuniform float uTime;\nuniform vec2 uResolution;\n\nfloat distance_to_line(vec2 p, vec2 a, vec2 b) {\n  vec2 pa = p - a;\n  vec2 n = b - a;\n  return length(pa - clamp(dot(pa, n) / dot(n, n), 0., 1.) * n);\n}\n\nfloat line(vec2 p, vec2 a, vec2 b) {\n  float d = distance_to_line(p, a, b);\n  return clamp(smoothstep(0.02, 0.0, d), 0.0, 0.9);\n}\n\nvec2 getpt(vec2 id, float t, float layer) {\n  vec2 pt = vec2(noise(id.x + noise(id.y) * 625.788 + layer) * t, noise(id.y + noise(id.x) * 9527.145) * t);\n  pt = vec2(cos(pt.x), sin(pt.y)) * 0.2;\n  return pt;\n}\n\nvoid main() {\n  float t = uTime * 1. + 1324.78, f, d;\n  float size = 20., s;\n  vec3 uv3 = aspect_ratio(uResolution, 0);\n  vec2 uv, id, pt, duv;\n  f = 0.;\n  for(float i=0.;i<3.;i++) {\n    size = 11. - 3. * i;\n    duv = vec2(uv3) + t * 0.6 / size + i * 0.2;\n    uv = fract(vec2(duv) * size) - 0.5;\n    id = floor(vec2(duv) * size);\n    s = noise(id) * 0.2;\n    pt = getpt(id, t, i);\n    d = length(uv - pt);\n    f += smoothstep(0.04 + 0.06 * i + s, 0.03 + 0.02 * i + s, d) * (3.- i)/10.;\n\n  }\n  vec3 fg = vec3(1., 1., 1.);\n  vec3 bg = vec3(.2, .5, .8);\n  float c = cloud(vec2(uv3), t * 100., vec2(1., 0.), 0.1) * 0.9;\n  gl_FragColor = vec4(mix(bg, fg, f) + c * vec3(.5, .8, .4), 1.);\n}')
  };
  renderer = new ShaderRenderer([shader], {
    root: '#root'
  });
  return renderer.animate();
});