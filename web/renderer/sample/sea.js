// Generated by LiveScript 1.3.1
var glslify, cloud;
glslify = require('glslify');
cloud = require("./sample/cloud");
window.addEventListener('load', function(){
  var shader, renderer;
  shader = {
    fragmentShader: glslify('precision highp float;\n#pragma glslify: aspect_ratio = require("../../src/aspect_ratio.shader")\n#pragma glslify: quantize = require("../../src/quantize.shader")\n#pragma glslify: fbm = require("../../src/fbm.shader")\n#pragma glslify: noise = require("glsl-noise/simplex/2d")\n\n// Processing specific input\nuniform float uTime;\nuniform vec2 uResolution;\n\nvoid main() {\n  vec3 uv = aspect_ratio(uResolution, 1);\n  float t = uTime * .2;\n  float len = length(uv.xy - vec2(.5, 1.));\n  float c = smoothstep(1., .2, len);\n  float a = (acos((uv.y - 1.) / len) + 1.23456) * 4.326;\n  float p = .6 + fbm((fbm(a) + t) * 1.258) * .5 + .1 * pow(fbm(t + uv.x), .5);\n  float m = 0.;\n  for(float i=0.;i<4.;i++) {\n    float size = 2. + i * i * 4.;\n    vec2 id = floor(uv.xy * size);\n    vec2 ft = fract(uv.xy * size);\n    float n = fbm(id + id.x * id.y + i);\n    float n2 = n * (6.28 + t);\n\n    vec2 pt = vec2(\n      0.5 + 0.35 * sin(n2 + id.y),\n      0.5 + 0.35 * cos(n2 + id.x)\n    );\n\n    float b = n * 0.12;\n    float f = n * 1.;\n    float r = fract(n * 2898.35);\n    if(r < 0.4) {\n      m += smoothstep(\n        b * (1. + f), b * (1. - f), length(ft - pt)\n      ) * (i + 1.) / 13.; //(1. - pow(f, .5));\n    }\n\n  }\n  vec3 color1 = vec3(1., .7, .1) * c * p;\n  vec3 color2 = vec3(1., 1., 1.) * m * p;\n  vec3 bk = vec3(.4, .3, .7);\n  gl_FragColor = vec4(color1 + color2 + bk, 1.);\n}')
  };
  renderer = new ShaderRenderer([shader], {
    root: '#root'
  });
  renderer.init();
  return renderer.animate();
});